#!/bin/bash

# Alloy gRPC Server Test Script
# Tests all major endpoints to verify the server is working correctly

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the directory of this script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}üß™ Testing Alloy gRPC Server...${NC}"
echo -e "${YELLOW}üìç Server should be running on localhost:50051${NC}"
echo ""

# Check if grpcurl exists in PATH or project root
GRPCURL_CMD=""
if command -v grpcurl &> /dev/null; then
    GRPCURL_CMD="grpcurl"
elif [ -f "$PROJECT_ROOT/grpcurl" ]; then
    GRPCURL_CMD="$PROJECT_ROOT/grpcurl"
else
    echo -e "${RED}‚ùå grpcurl not found!${NC}"
    echo "Please download grpcurl first:"
    echo "curl -L https://github.com/fullstorydev/grpcurl/releases/download/v1.9.1/grpcurl_1.9.1_linux_x86_64.tar.gz -o grpcurl.tar.gz"
    echo "tar -xzf grpcurl.tar.gz"
    exit 1
fi

cd "$PROJECT_ROOT"

echo -e "${BLUE}1. üè• Health Check:${NC}"
"${GRPCURL_CMD}" -plaintext localhost:50051 grpc.health.v1.Health/Check
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Health check passed${NC}"
else
    echo -e "${RED}‚ùå Health check failed${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}2. üèì Ping Test:${NC}"
"${GRPCURL_CMD}" -plaintext -d '{"message": "Hello from test script!"}' localhost:50051 org.alloytools.alloy.grpc.SolverService/Ping
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Ping test passed${NC}"
else
    echo -e "${RED}‚ùå Ping test failed${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}3. üîç List Services:${NC}"
"${GRPCURL_CMD}" -plaintext localhost:50051 list
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Service listing passed${NC}"
else
    echo -e "${RED}‚ùå Service listing failed${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}4. üßÆ Simple Solve Test (JSON):${NC}"
"${GRPCURL_CMD}" -plaintext -d '{
  "model_content": "sig Person {}\nrun {} for 3",
  "output_format": "OUTPUT_FORMAT_JSON",
  "solver_type": "SOLVER_TYPE_SAT4J"
}' localhost:50051 org.alloytools.alloy.grpc.SolverService/Solve
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Simple solve test passed${NC}"
else
    echo -e "${RED}‚ùå Simple solve test failed${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}5. üßÆ Complex Model Test:${NC}"
"${GRPCURL_CMD}" -plaintext -d '{
  "model_content": "sig Person {\n  friends: set Person\n}\nfact {\n  no p: Person | p in p.friends\n}\nrun {} for 3",
  "output_format": "OUTPUT_FORMAT_TEXT",
  "solver_type": "SOLVER_TYPE_SAT4J"
}' localhost:50051 org.alloytools.alloy.grpc.SolverService/Solve
if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Complex model test passed${NC}"
else
    echo -e "${RED}‚ùå Complex model test failed${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}6. ‚ùå Error Handling Test:${NC}"
"${GRPCURL_CMD}" -plaintext -d '{
  "model_content": "invalid syntax {{{",
  "output_format": "OUTPUT_FORMAT_JSON",
  "solver_type": "SOLVER_TYPE_SAT4J"
}' localhost:50051 org.alloytools.alloy.grpc.SolverService/Solve
if [ ! $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Error handling test passed${NC}"
else
    echo -e "${RED}‚ùå Error handling test failed${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}üéâ All tests completed successfully!${NC}"
echo -e "${YELLOW}üìä Test Summary:${NC}"
echo "  ‚úÖ Health Check"
echo "  ‚úÖ Ping Endpoint"
echo "  ‚úÖ Service Discovery"
echo "  ‚úÖ Simple Model Solving"
echo "  ‚úÖ Complex Model Solving"
echo "  ‚úÖ Error Handling"
echo ""
echo -e "${BLUE}üöÄ Your Alloy gRPC Server is working perfectly!${NC}"
